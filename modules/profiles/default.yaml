argo-cd:
  installCRDs: false
  configs:
    %{ if length(repositories) > 0 }
    repositories:
      ${indent(6, yamlencode(repositories))}
    %{ endif }
    secret:
      argocdServerAdminPassword: "${server_admin_password}"
      argocdServerAdminPasswordMtime: '2020-07-23T11:31:23Z'
      extra:
        oidc.default.clientSecret: "${replace(oidc.client_secret, "\"", "\\\"")}"
        accounts.pipeline.tokens: "${replace(argocd.accounts_pipeline_tokens, "\"", "\\\"")}"
        server.secretkey: "${replace(argocd.server_secretkey, "\"", "\\\"")}"
  controller:
    metrics:
      enabled: true
  dex:
    metrics:
      enabled: true
  repoServer:
    metrics:
      enabled: true
  server:
    extraArgs:
      - --insecure
    config:
      accounts.pipeline: apiKey
      resource.customizations: |
        argoproj.io/Application:
          health.lua: |
            hs = {}
            hs.status = "Progressing"
            hs.message = ""
            if obj.status ~= nil then
              if obj.status.health ~= nil then
                hs.status = obj.status.health.status
                if obj.status.health.message ~= nil then
                  hs.message = obj.status.health.message
                end
              end
            end
            return hs
        networking.k8s.io/Ingress:
          health.lua: |
            hs = {}
            hs.status = "Healthy"
            return hs
      configManagementPlugins: |
        - name: kustomized-helm
          init:
            command: ["/bin/sh", "-c"]
            args: ["helm dependency build || true"]
          generate:
            command: ["/bin/sh", "-c"]
            args: ["echo \"$HELM_VALUES\" | helm template . --name-template $ARGOCD_APP_NAME --namespace $ARGOCD_APP_NAMESPACE $HELM_ARGS -f - --include-crds > all.yaml && kustomize build"]
      url: "https://${argocd.domain}"
      oidc.config: |
        name: OIDC
        issuer: "${replace(oidc.issuer_url, "\"", "\\\"")}"
        clientID: "${replace(oidc.client_id, "\"", "\\\"")}"
        clientSecret: $oidc.default.clientSecret
        requestedIDTokenClaims:
          groups:
            essential: true
        requestedScopes:
          - openid
          - profile
          - email
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: "${cluster_issuer}"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-withclustername@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/ssl-redirect: "true"
        kubernetes.io/ingress.allow-http: "false"
      hosts:
        - "${argocd.domain}"
        - "argocd.apps.${base_domain}"
      tls:
        - secretName: argocd-tls
          hosts:
            - "${argocd.domain}"
            - "argocd.apps.${base_domain}"
    metrics:
      enabled: true
    rbacConfig:
      policy.default: ''
      policy.csv: |
        g, pipeline, role:admin
        g, argocd-admin, role:admin
      scopes: '[groups, cognito:groups, roles]'
%{ if cluster_issuer == "ca-issuer" }
    volumeMounts:
      - name: certificate
        mountPath: /etc/ssl/certs/ca.crt
        subPath: ca.crt
    volumes:
      - name: certificate
        secret:
          secretName: argocd-tls
%{ endif }
